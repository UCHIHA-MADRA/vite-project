Here is a **single, copy-paste ready file** combining your conversations into one file ‚Äî organized and corrected for clarity. It includes:

1. **Router setup**
2. **PostForm**
3. **RTE component**
4. **PostCard**
5. **Routing fix**
6. **Helpful notes**

---

### ‚úÖ `main.jsx` (entry point)

```jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import './index.css';
import { Provider } from 'react-redux';
import store from './store/store.js';
import { RouterProvider, createBrowserRouter } from 'react-router-dom';
import Home from './pages/Home.jsx';
import { AuthLayout, Login } from './components/index.js';
import AddPost from "./pages/AddPost";
import Signup from './pages/Signup';
import EditPost from "./pages/EditPost";
import Post from "./pages/Post";
import AllPosts from "./pages/AllPosts";

const router = createBrowserRouter([
  {
    path: "/",
    element: <App />,
    children: [
      { path: "/", element: <Home /> },
      {
        path: "/login",
        element: (
          <AuthLayout authentication={false}>
            <Login />
          </AuthLayout>
        ),
      },
      {
        path: "/signup",
        element: (
          <AuthLayout authentication={false}>
            <Signup />
          </AuthLayout>
        ),
      },
      {
        path: "/all-posts",
        element: (
          <AuthLayout authentication>
            <AllPosts />
          </AuthLayout>
        ),
      },
      {
        path: "/add-post",
        element: (
          <AuthLayout authentication>
            <AddPost />
          </AuthLayout>
        ),
      },
      {
        path: "/edit-post/:slug",
        element: (
          <AuthLayout authentication>
            <EditPost />
          </AuthLayout>
        ),
      },
      {
        path: "/post/:slug", // ‚úÖ FIXED: Must match view route
        element: <Post />,
      },
    ],
  },
]);

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Provider store={store}>
      <RouterProvider router={router} />
    </Provider>
  </React.StrictMode>
);
```

---

### ‚úÖ `PostCard.jsx`

```jsx
import React from 'react';
import appwriteService from "../appwrite/config";
import { Link } from 'react-router-dom';

function PostCard({ $id, title, slug, featuredImage }) {
  return (
    <Link to={`/post/${slug}`}>
      <div className='w-full bg-gray-100 rounded-xl p-4'>
        <div className='w-full justify-center mb-4'>
          <img src={appwriteService.getFileView(featuredImage)} alt={title} className='rounded-xl' />
        </div>
        <h2 className="text-xl font-bold">{title}</h2>
      </div>
    </Link>
  );
}

export default PostCard;
```

---

### ‚úÖ `RTE.jsx`

```jsx
import React from "react";
import { Editor } from "@tinymce/tinymce-react";
import { Controller } from "react-hook-form";
import conf from "../conf/conf";

export default function RTE({ name, control, label, defaultValue = "" }) {
  return (
    <div className="w-full">
      {label && <label className="inline-block mb-1 pl-1">{label}</label>}
      <Controller
        name={name || "content"}
        control={control}
        defaultValue={defaultValue}
        render={({ field: { onChange, value } }) => (
          <Editor
            apiKey={conf.tinyMCEApiKey}
            value={value}
            init={{
              height: 500,
              menubar: true,
              plugins: [
                "advlist", "autolink", "lists", "link", "image",
                "charmap", "preview", "anchor", "searchreplace",
                "visualblocks", "code", "fullscreen", "insertdatetime",
                "media", "table", "help", "wordcount",
              ],
              toolbar:
                "undo redo | blocks | image | bold italic forecolor | " +
                "alignleft aligncenter alignright alignjustify | " +
                "bullist numlist outdent indent | removeformat | help",
              content_style:
                "body { font-family:Helvetica,Arial,sans-serif; font-size:14px }",
            }}
            onEditorChange={onChange}
          />
        )}
      />
    </div>
  );
}
```

---

### ‚úÖ `PostForm.jsx` (strips `<p>` tags, handles image, and submits content)

```jsx
/* eslint-disable no-unused-vars */
import React, { useCallback, useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { Button, Input, Select, RTE } from '../index';
import appwriteService from '../../appwrite/config';
import { useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';

function PostForm({ post }) {
  const [imageError, setImageError] = useState(false);
  const [imageUrl, setImageUrl] = useState('');
  
  const { register, handleSubmit, watch, setValue, control, getValues } = useForm({
    defaultValues: {
      title: post?.title || '',
      slug: post?.slug || '',
      content: post?.content || '',
      status: post?.status || 'active',
    },
  });

  const navigate = useNavigate();
  const userData = useSelector(state => state.auth?.userData);

  const slugTransform = useCallback((value) => {
    return value?.trim().toLowerCase()
      .replace(/[^a-zA-Z\d\s]+/g, '')
      .replace(/\s+/g, '-')
      .replace(/^-+|-+$/g, '') || '';
  }, []);

  useEffect(() => {
    const subscription = watch((value, { name }) => {
      if (name === 'title') {
        setValue('slug', slugTransform(value.title), { shouldValidate: true });
      }
    });
    return () => subscription.unsubscribe();
  }, [watch, slugTransform, setValue]);

  useEffect(() => {
    if (post?.featuredImage) {
      const url = appwriteService.getFileView(post.featuredImage);
      setImageUrl(typeof url === 'string' ? url : url?.href || url?.toString());
    }
  }, [post]);

  const submit = async (data) => {
    try {
      let file = data.image && data.image[0] ? await appwriteService.uploadFile(data.image[0]) : null;
      
      if (post) {
        if (file && post.featuredImage) {
          await appwriteService.deleteFile(post.featuredImage);
        }

        const dbPost = await appwriteService.updatePost(post.$id, {
          ...data,
          featuredImage: file ? file.$id : post.featuredImage,
        });

        if (dbPost) navigate(`/post/${dbPost.slug}`);
      } else {
        if (file) data.featuredImage = file.$id;

        const uniqueSuffix = Math.random().toString(36).substring(2, 8);
        data.slug = `${slugTransform(data.slug)}-${uniqueSuffix}`;

        const dbPost = await appwriteService.createPost({
          ...data,
          userId: userData.$id,
        });

        if (dbPost) navigate(`/post/${dbPost.slug}`);
      }
    } catch (err) {
      console.error("Error submitting post:", err);
    }
  };

  return (
    <form onSubmit={handleSubmit(submit)} className="flex flex-wrap">
      <div className="w-2/3 px-2">
        <Input label="Title :" {...register("title", { required: true })} className="mb-4" />
        <Input label="Slug :" {...register("slug", { required: true })} className="mb-4"
          onInput={(e) => setValue("slug", slugTransform(e.currentTarget.value), { shouldValidate: true })} />
        <RTE label="Content :" name="content" control={control} defaultValue={getValues("content")} />
      </div>
      <div className="w-1/3 px-2">
        <Input
          label="Featured Image :"
          type="file"
          className="mb-4"
          accept="image/png, image/jpg, image/jpeg, image/gif"
          {...register("image", { required: !post })}
        />
        {imageUrl && !imageError && (
          <img src={imageUrl} onError={() => setImageError(true)} className="rounded-lg w-full h-auto mb-4" />
        )}
        <Select options={["active", "inactive"]} label="Status" className="mb-4" {...register("status", { required: true })} />
        <Button type="submit" className="w-full" bgColor={post ? "bg-green-500" : undefined}>
          {post ? "Update" : "Submit"}
        </Button>
      </div>
    </form>
  );
}

export default PostForm;
```

---

### üìù Notes

* ‚úÖ Use `/post/:slug` in the **router** and all **links** (like in `PostCard.jsx`).
* ‚úÖ Avoid using `:id` if your lookup is by slug


.

* ‚úÖ Ensure your backend returns posts by slug, not ID.
* ‚úÖ Fix the `slug is not defined` error by passing `slug` as a prop.

---

Would you like this as a downloadable file or code repository format (e.g., `.zip` or GitHub link)?
